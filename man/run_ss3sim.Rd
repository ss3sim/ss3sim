% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_ss3sim.r
\name{run_ss3sim}
\alias{run_ss3sim}
\title{Master function to run simulations using Stock Synthesis}
\usage{
run_ss3sim(
  iterations,
  simdf = NULL,
  parallel = FALSE,
  parallel_iterations = FALSE,
  ...
)
}
\arguments{
\item{iterations}{Which iterations to run. A numeric vector. For example
\code{1:100}. The same number of iterations will be run for each scenario.
If any iterations already exist, then ss3sim will skip over them.}

\item{simdf}{A data frame of instructions with one row per scenario.
See \code{\link[=setup_scenarios_defaults]{setup_scenarios_defaults()}} for default values that will be
passed to ss3sim for a generic simulation to get you started. These
values will be used if \code{simdf} is left at its default value of \code{NULL}.}

\item{parallel}{A logical argument that controls whether the scenarios are
run in parallel. You will need to register multiple cores first with a
package such as \pkg{doParallel} and have the \pkg{foreach} package
installed. See the example below.}

\item{parallel_iterations}{Logical. By default \code{parallel = TRUE} will
run scenarios in parallel. If you set \code{parallel = TRUE} and
\code{parallel_iterations = TRUE} then the iterations will be run in
parallel. This would be useful if you were only running one scenario
but you wanted to run it faster.}

\item{...}{Anything else to pass to \code{\link[=ss3sim_base]{ss3sim_base()}}. This could
include \code{bias_adjust}. Also, you can pass
additional options to the executable through the argument
\code{admb_options}.}
}
\value{
The output will appear in your current \R working directory
Folders will be named based on the \code{"scenario"} column
of \code{simdf} or based on the date-time stamp
(i.e., \code{mmddhhmmss}) generated automatically at the start of the simulation.
The resulting folders will look like the following if you run
your simulation at noon on January 01:
\itemize{
\item \code{0101120000/1/om}
\item \code{0101120000/1/em}
\item \code{0101120000/2/om}
\item ...
}
}
\description{
This is the main high-level wrapper function for running \pkg{ss3sim}
simulations. First, this function separates the data frame of simulation
settings by row for each scenario into a list format. These lists are then
passed to \code{\link[=ss3sim_base]{ss3sim_base()}} to run each simulation. Alternatively, you
can run \code{\link[=ss3sim_base]{ss3sim_base()}} directly using your own lists.
}
\details{
The operating model folder should contain: \code{forecast.ss},
\code{yourmodel.ctl}, \code{yourmodel.dat}, \code{ss.par}, and
\code{starter.ss}. The files should be the versions that are returned from an
Stock Synthesis run as \code{.ss_new} files. This is important because it creates
consistent formatting which many of the functions in this package depend on.
Rename the \code{.ss_new} files as listed above (and in all lowercase). The
estimation model folder should contain all the same files listed above except
the \code{ss.par} and \code{yourmodel.dat} files, which are unnecessary but
can be included if desired. See the vignette for details on modifying an
existing Stock Synthesis model to run with \pkg{ss3sim}. Alternatively, you might
consider modifying one of the built-in model configurations.

Due to the way that Stock Synthesis is being used as an OM, you may see
the following ADMB error may appear in the console:
\verb{Error -- base = 0 in function prevariable& pow(const prevariable& v1, CGNU_DOUBLE u)}
However, this is not a problem because ADMB is not used to optimize the OM,
and thus, the error can safely be ignored.
}
\examples{
\dontrun{
# A run with deterministic process error for model checking
# by passing user_recdevs to ss3sim_base through run_ss3sim:
recdevs_det <- matrix(0, nrow = 101, ncol = 2)
df <- data.frame(setup_scenarios_defaults(),
  "scenarios" = "determinate"
)
run_ss3sim(
  iterations = 1:2, simdf = df,
  bias_adjust = FALSE, user_recdevs = recdevs_det
)
get_results_all(user_scenarios = "determinate", overwrite = TRUE)
ts <- utils::read.csv("ss3sim_ts.csv")
expect_equivalent(
  unlist(ts$rec_dev[ts$year \%in\% 1:10 & ts$iteration == 2]),
  recdevs_det[1:10, 2]
)
}

}
\seealso{
\code{\link[=ss3sim_base]{ss3sim_base()}} can be called directly by passing lists of arguments,
rather than using the data frame approach with \code{run_ss3sim}.
The lists correspond to each function called by \code{\link[=ss3sim_base]{ss3sim_base()}}.
Each element is itself a list of arguments for the given function.
Either way allows users to pass arguments to each of the
\verb{change_*()} or \verb{sample_*()} functions.
Note that if you do not include an argument,
then \code{\link[=ss3sim_base]{ss3sim_base()}} will assume the value of that argument is \code{NULL}.

\code{\link[=run_ss3model]{run_ss3model()}} is called by \code{\link[=ss3sim_base]{ss3sim_base()}}.
}
\author{
Sean C. Anderson
}
